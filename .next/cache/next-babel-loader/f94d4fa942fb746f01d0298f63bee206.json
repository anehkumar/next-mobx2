{"ast":null,"code":"var _class, _descriptor, _descriptor2, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action, computed } from 'mobx';\nimport { useStaticRendering } from 'mobx-react';\nconst isServer = true; // eslint-disable-next-line react-hooks/rules-of-hooks\n\nuseStaticRendering(isServer);\nexport let CompanyStore = (_class = (_temp = class CompanyStore {\n  constructor() {\n    _initializerDefineProperty(this, \"companies\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"addCompany\", _descriptor2, this);\n  }\n\n  get companyCount() {\n    return this.company.size;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"companies\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"addCompany\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return company => {\n      this.companies.push(company);\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"companyCount\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"companyCount\"), _class.prototype)), _class);\n/* const CompanyStore = new CompanyStore();\nexport default CompanyStore; */\n\nexport async function fetchInitialCompanyState() {\n  // You can do anything to fetch initial store state\n  return {};\n}","map":{"version":3,"sources":["/var/www/html/aneh/next-by-aneh/stores/CompanyStore.js"],"names":["observable","action","computed","useStaticRendering","isServer","CompanyStore","companyCount","company","size","companies","push","fetchInitialCompanyState"],"mappings":";;;;;;;;AAAA,SAAQA,UAAR,EAAoBC,MAApB,EAA4BC,QAA5B,QAA2C,MAA3C;AACA,SAASC,kBAAT,QAAmC,YAAnC;AAEA,MAAMC,QAAQ,OAAd,C,CACA;;AACAD,kBAAkB,CAACC,QAAD,CAAlB;AAEA,WAAaC,YAAb,sBAAO,MAAMA,YAAN,CAAkB;AAAA;AAAA;;AAAA;AAAA;;AAOrB,MAAcC,YAAd,GAA4B;AACxB,WAAO,KAAKC,OAAL,CAAaC,IAApB;AACH;;AAToB,CAAzB,mFACKR,UADL;AAAA;AAAA;AAAA;AAAA;AAAA,WAC4B,EAD5B;AAAA;AAAA,8EAGKC,MAHL;AAAA;AAAA;AAAA;AAAA;AAAA,WAG0BM,OAAD,IAAa;AAC9B,WAAKE,SAAL,CAAeC,IAAf,CAAoBH,OAApB;AACH,KALL;AAAA;AAAA,iEAOKL,QAPL;AAYA;;;AAGA,OAAO,eAAeS,wBAAf,GAA0C;AAC7C;AACA,SAAO,EAAP;AACH","sourcesContent":["import {observable, action, computed} from 'mobx';\nimport { useStaticRendering } from 'mobx-react'\n\nconst isServer = typeof window === 'undefined'\n// eslint-disable-next-line react-hooks/rules-of-hooks\nuseStaticRendering(isServer)\n\nexport class CompanyStore{\n    @observable companies = [];\n\n    @action addCompany = (company) => {\n        this.companies.push(company);\n    }\n\n    @computed get companyCount(){\n        return this.company.size;\n    }\n}\n\n/* const CompanyStore = new CompanyStore();\nexport default CompanyStore; */\n\nexport async function fetchInitialCompanyState() {\n    // You can do anything to fetch initial store state\n    return {}\n}"]},"metadata":{},"sourceType":"module"}